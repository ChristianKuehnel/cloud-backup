#!/bin/bash
set -eu
set -x

SCRIPTDIR=$(cd "$(dirname "$0")" && pwd)
ROOTDIR=$(dirname $SCRIPTDIR)
CFGFILE=$ROOTDIR/backup.cfg
HOSTNAME=$(hostname)
LOGFILE=$ROOTDIR/backup.log
NEXTCLOUD_DB_DUMP=/tmp/nextcloud_database.bak
GET_CONFIG_SCRIPT=$SCRIPTDIR/get_db_config.php

# functions #############
error() {
  printf '\E[31m'; echo "$@"; printf '\E[0m' | tee -a $LOGFILE
}

log() {
  echo "$(date --rfc-3339=seconds): $@" | tee -a $LOGFILE
}

failure() {
  if [ ! -z "${NEXTCLOUD_DIR:-}" ] ; then
    log "disabling maintenance mode..."
    nextcloud_maintenance_mode --off
  fi
  error "Execution failed!"
  trap '' EXIT
  exit -1
}

backup_dir() {
  TARGETPATH=$BACKUP_TARGET/$HOSTNAME/$1
  log "Backing up $1 to $TARGETPATH ..."
  PASSPHRASE=""  duplicity --encrypt-sign-key $GPG_KEY_ID $1 $TARGETPATH | tee -a $LOGFILE
}

backup_dirs(){
  for d in ${SOURCE_DIRS[@]}
  do
    backup_dir $d
  done

}

nextcloud_maintenance_mode(){
  bash -c "cd /var/www/nextcloud;sudo -u www-data php occ maintenance:mode $1" | tee -a $LOGFILE
}

backup_nextcloud(){
  log "Creating backup of nextcloud instance in $1"
  if [ ! -d $1 ] ; then
    error "dir not found: $1"
    failure
  fi

  # read database configuration from config.php into variables
  log "Reading Nextcloud config..."
  eval "$($GET_CONFIG_SCRIPT)"
  
  nextcloud_maintenance_mode  --on

  log "Dumping database into local file..."
  mysqldump --single-transaction --host=$dbhost --user=$dbuser --password=$dbpassword $dbname > $NEXTCLOUD_DB_DUMP | tee -a $LOGFILE
 
  
  # backup the nextcloud folder and the database dump in one step
  log "Backing up files and database..."
  TARGETPATH=$BACKUP_TARGET/$HOSTNAME/nextcloud
  PASSPHRASE=""  duplicity --encrypt-sign-key $GPG_KEY_ID --include="$1/**" --include="$NEXTCLOUD_DB_DUMP" --exclude="**" / $TARGETPATH | tee -a $LOGFILE


  rm -f $NEXTCLOUD_DB_DUMP | tee -a $LOGFILE
  log "resuming nextcloud..."
  nextcloud_maintenance_mode --off 
}


# main #################
trap failure EXIT

if [ ! -f $CFGFILE ] ; then
  error "Config files does not exist: $CFGFILE"
  failure
fi

log "Using config file: $CFGFILE"
. $CFGFILE

if [ ! -z "${SOURCE_DIRS:-}" ] ; then
  backup_dirs
fi


if [ ! -z "${NEXTCLOUD_DIR:-}" ] ; then
  backup_nextcloud $NEXTCLOUD_DIR
fi

log "Done."
trap '' EXIT


